# Organized imports
import streamlit as st
import yfinance as yf
import pandas as pd
import matplotlib.pyplot as plt
from datetime import datetime
import time
from alpha_vantage.timeseries import TimeSeries
import plotly.graph_objects as go

# Streamlit page configuration
st.set_page_config(page_title="SMA Multi-Stock Backtest", layout="wide")
st.title("ðŸ“ˆ SMA Multi-Stock Strategy Backtest Analysis")

# Sidebar settings
st.sidebar.header("ðŸ”§ Settings")
tickers_input = st.sidebar.text_input("Enter stock symbols (comma separated, e.g. 2330.TW,2317.TW)", value="2330.TW,2317.TW")
short_window = st.sidebar.slider("Short SMA (SMA1)", 5, 60, 20)
long_window = st.sidebar.slider("Long SMA (SMA2)", 30, 200, 60)
date_range = st.sidebar.radio("Backtest Period", ["All", "Last 1 Year"])
strategy_type = st.sidebar.selectbox("Strategy Type", ["SMA Crossover", "Golden/Death Cross", "Momentum", "EMA Crossover"])
data_source = st.sidebar.selectbox("Data Source", ["Yahoo Finance", "Alpha Vantage"])

run = st.sidebar.button("Run Backtest")

# Helper function to fetch stock data from Alpha Vantage
def fetch_data_alpha_vantage(ticker, start, end, api_key="demo"):
    ts = TimeSeries(key=api_key, output_format='pandas')
    data, meta_data = ts.get_daily(symbol=ticker, outputsize='full')
    data = data[(data.index >= start) & (data.index <= end)]
    return data

# Helper function to fetch stock data
def fetch_data(ticker, start, end, retry=2, source="yfinance"):
    if source == "alpha_vantage":
        return fetch_data_alpha_vantage(ticker, start, end)
    else:
        for i in range(retry):
            try:
                data = yf.download(ticker, start=start, end=end, progress=False)
                return data
            except Exception:
                time.sleep(1)
        return pd.DataFrame()

# Main logic
if run:
    # Parse user inputs
    tickers = [t.strip() for t in tickers_input.split(",") if t.strip()]
    today = pd.Timestamp(datetime.today())
    start_date = pd.Timestamp("2015-04-01") if date_range == "All" else datetime.today() - pd.DateOffset(years=1)

    all_equity = pd.DataFrame()
    summary_list = []

    # Progress bar initialization
    progress = st.progress(0, text="Backtesting...")

    # Enhanced progress bar with animation
    progress_text = st.empty()
    for idx, ticker in enumerate(tickers):
        progress_text.text(f"Processing {ticker} ({idx + 1}/{len(tickers)})...")
        st.subheader(f"ðŸ“Š {ticker} Strategy Result")
        try:
            # Fetch and validate data
            data = fetch_data(ticker, start=start_date, end=today, source="yfinance" if data_source == "Yahoo Finance" else "alpha_vantage")
            if isinstance(data.columns, pd.MultiIndex):
                data.columns = data.columns.get_level_values(0)
            if "Close" not in data.columns or data.empty or data["Close"].isnull().all():
                st.warning(f"{ticker} has no valid data")
                continue

            # Calculate SMA and signals
            data['SMA1'] = data['Close'].rolling(window=short_window).mean()
            data['SMA2'] = data['Close'].rolling(window=long_window).mean()

            data['Signal'] = 0
            if strategy_type == "SMA Crossover":
                data.loc[data['SMA1'] > data['SMA2'], 'Signal'] = 1
                data.loc[data['SMA1'] < data['SMA2'], 'Signal'] = -1
            elif strategy_type == "Golden/Death Cross":
                cond_buy = (data['SMA1'] > data['SMA2']) & (data['SMA1'].shift(1) <= data['SMA2'].shift(1))
                cond_sell = (data['SMA1'] < data['SMA2']) & (data['SMA1'].shift(1) >= data['SMA2'].shift(1))
                data.loc[cond_buy, 'Signal'] = 1
                data.loc[cond_sell, 'Signal'] = -1
            elif strategy_type == "Momentum":
                data['Momentum'] = data['Close'].pct_change(periods=10)
                data.loc[data['Momentum'] > 0, 'Signal'] = 1
                data.loc[data['Momentum'] < 0, 'Signal'] = -1

            # Add EMA strategy
            data['EMA1'] = data['Close'].ewm(span=short_window, adjust=False).mean()
            data['EMA2'] = data['Close'].ewm(span=long_window, adjust=False).mean()
            if strategy_type == "EMA Crossover":
                data.loc[data['EMA1'] > data['EMA2'], 'Signal'] = 1
                data.loc[data['EMA1'] < data['EMA2'], 'Signal'] = -1

            # Calculate returns and equity curve
            data['Position'] = data['Signal'].shift(1)
            data['Market Return'] = data['Close'].pct_change()
            data['Strategy Return'] = data['Position'] * data['Market Return']
            data['Equity Curve'] = (1 + data['Strategy Return'].fillna(0)).cumprod()

            # Calculate Max Drawdown
            data['Cumulative Return'] = (1 + data['Strategy Return'].fillna(0)).cumprod()
            data['Cumulative High'] = data['Cumulative Return'].cummax()
            data['Drawdown'] = data['Cumulative Return'] / data['Cumulative High'] - 1
            max_drawdown = data['Drawdown'].min()

            # Add stop-loss and take-profit logic
            stop_loss = -0.1  # Example: 10% stop-loss
            take_profit = 0.2  # Example: 20% take-profit
            data['Signal'] = 0  # Reset signals
            data.loc[data['Drawdown'] <= stop_loss, 'Signal'] = -1  # Stop-loss sell signal
            data.loc[data['Strategy Return'] >= take_profit, 'Signal'] = 1  # Take-profit buy signal

            # Skip if not enough data
            if data[['SMA1', 'SMA2', 'Equity Curve']].dropna().empty:
                st.warning(f"{ticker} has insufficient data for strategy calculation")
                continue

            # Calculate performance metrics
            strategy_return = (1 + data['Strategy Return'].fillna(0)).prod() - 1
            buyhold_return = (1 + data['Market Return'].fillna(0)).prod() - 1

            # Calculate additional metrics
            total_trades = len(data[data['Signal'] != 0])
            winning_trades = len(data[(data['Signal'] == 1) & (data['Strategy Return'] > 0)])
            losing_trades = len(data[(data['Signal'] == -1) & (data['Strategy Return'] < 0)])
            win_rate = winning_trades / total_trades if total_trades > 0 else 0
            avg_gain = data[data['Strategy Return'] > 0]['Strategy Return'].mean()
            avg_loss = data[data['Strategy Return'] < 0]['Strategy Return'].mean()

            # Update summary with additional metrics
            summary_list.append({
                "Ticker": ticker,
                "SMA Strategy Return (%)": strategy_return * 100,
                "Buy & Hold Return (%)": buyhold_return * 100,
                "Max Drawdown (%)": max_drawdown * 100,
                "Total Trades": total_trades,
                "Win Rate (%)": win_rate * 100,
                "Avg Gain (%)": avg_gain * 100 if avg_gain is not None else 0,
                "Avg Loss (%)": avg_loss * 100 if avg_loss is not None else 0
            })

            # Enhanced equity curve plot with Plotly
            fig = go.Figure()
            fig.add_trace(go.Scatter(x=data.index, y=data['Equity Curve'], mode='lines', name='Strategy Equity', line=dict(color='blue')))
            fig.add_trace(go.Scatter(x=data.index, y=data['Cumulative High'], mode='lines', name='Cumulative High', line=dict(dash='dash', color='orange')))

            # Highlight drawdown regions
            drawdown_regions = data[data['Drawdown'] < 0]
            fig.add_trace(go.Scatter(x=drawdown_regions.index, y=drawdown_regions['Equity Curve'], mode='lines', fill='tonexty', name='Drawdown', line=dict(color='red', width=0), fillcolor='rgba(255, 0, 0, 0.3)'))

            # Mark buy/sell points
            buy_signals = data[(data['Signal'] == 1) & (data['Signal'].shift(1) != 1)]
            sell_signals = data[(data['Signal'] == -1) & (data['Signal'].shift(1) != -1)]
            fig.add_trace(go.Scatter(x=buy_signals.index, y=data.loc[buy_signals.index, 'Equity Curve'], mode='markers', name='Buy Signal', marker=dict(color='green', symbol='triangle-up', size=10)))
            fig.add_trace(go.Scatter(x=sell_signals.index, y=data.loc[sell_signals.index, 'Equity Curve'], mode='markers', name='Sell Signal', marker=dict(color='red', symbol='triangle-down', size=10)))

            # Add layout details
            fig.update_layout(title=f"{ticker} Enhanced Strategy Equity Curve", xaxis_title="Date", yaxis_title="Equity", legend_title="Legend", template="plotly_white")

            st.plotly_chart(fig)

            # Display data table
            st.dataframe(data[['Close', 'SMA1', 'SMA2', 'Signal', 'Position']].dropna().tail(20))

            # Strategy performance comparison visualization
            st.subheader("ðŸ“Š Strategy Performance Comparison")
            fig3, ax3 = plt.subplots(figsize=(12, 5))
            ax3.plot(data['Equity Curve'], label='SMA Strategy')
            ax3.plot(data['Cumulative Return'], label='EMA Strategy', linestyle='--')
            ax3.set_title(f"{ticker} Strategy Performance Comparison")
            ax3.legend()
            st.pyplot(fig3)
            plt.close(fig3)

            # Save for merged equity curve
            all_equity[ticker] = data['Equity Curve']

        except Exception as e:
            st.error(f"{ticker} error: {e}")

        # Update progress bar
        progress.progress((idx + 1) / len(tickers))
    progress_text.text("Backtesting complete!")

    # Multi-stock merged equity curve
    if not all_equity.empty:
        all_equity = all_equity.dropna(axis=1, how='all')
        if not all_equity.empty:
            st.subheader("ðŸ“ˆ Multi-Stock Strategy Equity Comparison")
            fig2, ax2 = plt.subplots(figsize=(12, 5))
            (all_equity / all_equity.iloc[0]).plot(ax=ax2)
            ax2.set_title("Normalized Strategy Equity Comparison")
            ax2.set_ylabel("Normalized Equity")
            st.pyplot(fig2)
            plt.close(fig2)

    # Show backtest summary table
    if summary_list:
        summary_df = pd.DataFrame(summary_list).set_index("Ticker")
        st.subheader("ðŸ“‹ Backtest Performance Summary")
        st.dataframe(summary_df.style.format("{:.2f}"))
        st.download_button("Download Performance Table (CSV)", summary_df.to_csv().encode("utf-8-sig"), file_name="sma_summary.csv", mime="text/csv")
        # Export results to PDF (placeholder for actual implementation)
        st.download_button("Download PDF Report", b"PDF content placeholder", file_name="backtest_report.pdf", mime="application/pdf")